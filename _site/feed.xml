<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Hades Blog</title>
    <description>waiting...</description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Fri, 23 Mar 2018 00:13:46 +0800</pubDate>
    <lastBuildDate>Fri, 23 Mar 2018 00:13:46 +0800</lastBuildDate>
    <generator>Jekyll v3.7.3</generator>
    
      <item>
        <title>利用gitlab webhook自动触发jenkins部署任务</title>
        <description>&lt;p&gt;之前所有项目每个环境的构建都对应 jenkins 上的一个任务，每次在 gitlab 上 push 代码之后，都需要手动在 jenkins 上点个部署。这显然比较麻烦。刚好最近了解到 jenkins 有构建触发器这样的功能，可以利用 gitlab webhook 来触发 jenkins 任务。&lt;/p&gt;

&lt;p&gt;具体做法如下：&lt;/p&gt;

&lt;p&gt;1、打开 jenkins 任务配置页面，点击构建触发器tab&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;//qhyxpicoss.kujiale.com/2018/03/22/LKZ23RAKAIB4ARYEAAAAABI8_1966x1198.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;勾选所需要的触发条件，我选择在push操作发生的时候进行构建。&lt;/p&gt;

&lt;p&gt;GitLab CI Service URL 后面是触发这个构建操作 api 调用的地址，这个 URL 待会儿是需要用到的。&lt;/p&gt;

&lt;p&gt;配置完 jenkins 之后，需要在 gitlab 里面配置 webhook&lt;/p&gt;

&lt;p&gt;打开 gitlab project ，点击 Settings ， 接着点击 Integrations 。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;第一行 URL 填写的就是 jenkins 构建触发器配置页面 GitLab CI Service URL 后面的 URL 地址。默认勾选的 hook 是 push event 。&lt;/p&gt;

&lt;p&gt;点击最下面的 Add webhook ，任务似乎就这样完成了。&lt;/p&gt;

&lt;p&gt;于是我点击了 webhook 旁边的 test 按钮，测试一下对 jenkins 的调用是否生效。果然，接口报了401的错误。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;//qhyxpicoss.kujiale.com/2018/03/23/LKZ23RAKAIB4ARYEAAAAABY8_1934x54.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;看到 invalid token 突然想到刚才在 webhook 创建的时候有个 secrect token 没有填写，这个 token 应该就是 jenkins 那边提供进行 api 权限认真的。再回到 jenkins 构建触发器配置的页面，在一个不起眼的角落里发现了一个高级选项的按钮。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;//qhyxpicoss.kujiale.com/2018/03/23/LKZ23RAKAIB4ARYEAAAAABQ8_2140x1182.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;点开之后发现有生成 secrect token 的功能。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;//qhyxpicoss.kujiale.com/2018/03/23/LKZZROQKAIB36X4SAAAAADY8_1808x592.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;勾选所需配置之后，点击 generate 按钮生成 secrect token 。&lt;/p&gt;

&lt;p&gt;将这里生成的 secret token 加入 webhook 的配置中，点击报错，再次尝试，这次成功地触发了 jenkins 任务的构建，大功告成！&lt;/p&gt;
</description>
        <pubDate>Thu, 22 Mar 2018 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2018/03/22/%E5%88%A9%E7%94%A8gitlab-webhook%E8%87%AA%E5%8A%A8%E8%A7%A6%E5%8F%91jenkins%E9%83%A8%E7%BD%B2%E4%BB%BB%E5%8A%A1/</link>
        <guid isPermaLink="true">http://localhost:4000/2018/03/22/%E5%88%A9%E7%94%A8gitlab-webhook%E8%87%AA%E5%8A%A8%E8%A7%A6%E5%8F%91jenkins%E9%83%A8%E7%BD%B2%E4%BB%BB%E5%8A%A1/</guid>
        
        
      </item>
    
      <item>
        <title>基于容器化的方案搭建 Node.js 应用部署平台（一）—— 综述</title>
        <description>&lt;h2 id=&quot;为什么要开发这样一个平台&quot;&gt;为什么要开发这样一个平台&lt;/h2&gt;

&lt;p&gt;当我们想要写一个 Node.js 应用时，需要解决很多编写代码之外的事情（机器、环境、部署、etc），这很大程度上提高了编写应用的成本。Node Labs 平台将提供应用创建、运行环境、部署、监控等功能，让创建 Node.js 应用变得更加简单。&lt;/p&gt;

&lt;h2 id=&quot;什么样的项目适用于这个平台进行部署和管理&quot;&gt;什么样的项目适用于这个平台进行部署和管理&lt;/h2&gt;

&lt;p&gt;我们前期的目标是针对内部使用的、较为简单的，对负载要求较低的 Node.js 应用。我们制定一套适用于该平台部署管理应用的规范，凡是符合该规范的 Node.js 应用均可部署在该平台上。&lt;/p&gt;

&lt;h2 id=&quot;如何搭建一个-nodejs-应用部署平台&quot;&gt;如何搭建一个 Node.js 应用部署平台&lt;/h2&gt;

&lt;p&gt;我们考虑使用基于 docker 的容器化方案，这样可以实现快速部署 Node.js 应用的目标。但是容器的管理、通信、调度也成为了要考虑的问题，比如应用容器如何访问数据库容器、如何定义端口映射规则、如何动态扩容等等。单单使用 docker 技术显然不能满足我们的需求。&lt;/p&gt;

&lt;p&gt;面对这些难以解决的问题，我们选择的方向转为 kubernetes。&lt;/p&gt;

&lt;p&gt;Kubernetes 可以理解为容器的集群，其目的是让用户通过 Kubernetes 集群来进行云端容器集群的管理，而无需用户进行复杂的设置工作。系统会自动选取合适的工作节点来执行具体的容器集群调度处理工作。&lt;/p&gt;

&lt;p&gt;我们考虑使用 Deployment、Ingress、Service、Pod 四种资源来实现我们的目的。  Pod 是 Kubernetes 创建或部署的基本单位，负责封装应用容器，是单个应用的实例。Service 负责抽象一组 Pod 的功能，并且映射到 Pod 的端口。Ingress 负责将域名映射到 Service，这样就可以通过域名进行访问。Deployment 是对部署进行的抽象，可以避免直接操作 Pod。&lt;/p&gt;

&lt;p&gt;可以说 kubernetes 解决了在生产中使用 docker 技术的很多痛点。&lt;/p&gt;

&lt;h2 id=&quot;整体架构&quot;&gt;整体架构&lt;/h2&gt;

&lt;p&gt;整体结构如下（待扩展）
&lt;img src=&quot;//qhyxpicoss.kujiale.com/2018/02/26/LKJ4F6IKAIB36EKZAAAAAAY8_1679x669.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;用户在前台提交应用相关信息（ gitlab 地址、 branch、node 版本、域名前缀等）即可一键部署，可以查看部署进度（实时日志）、应用状态等。Node Labs 核心服务通过和周边的交互完成应用的部署、查看等任务。&lt;/p&gt;

&lt;p&gt;我们提供两种类型 “应用” 的创建。除了 Node.js 应用，我们还提供数据库容器的创建，如果需要数据库相关服务，可以在创建应用之前创建所需的数据库，然后部署应用。&lt;/p&gt;

&lt;h2 id=&quot;核心服务&quot;&gt;核心服务&lt;/h2&gt;

&lt;p&gt;如下图所示&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://qhyxpicoss.kujiale.com/2018/02/28/LKLEPOIKAIB36L2EAAAAAAA8_1239x560.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;UserService 负责用户身份和权限控制，是调用其他 service 的基础。在 Node Labs 平台中，UserService 对接了内部系统的登录服务进行身份的认证，之后会做一些权限方面的扩展。&lt;/p&gt;

&lt;p&gt;DeploymentService 负责应用的部署。主要包括镜像生成和部署资源生成两大部分。镜像生成包括代码拉取、镜像打包、推送镜像到云端等部分。根据用户输入生成 Deployment 相关配置，调用kubeService 生成部署、获取部署信息等。每次的部署都包含应用、用户等相关信息，方便后续的查询。&lt;/p&gt;

&lt;p&gt;AppService 负责应用状态、信息相关，主要通过获取 kubernetes 集群中 Pod 的信息，对其状态进行分析。&lt;/p&gt;

&lt;p&gt;DbService 负责部署数据库相关，目前提供 mongo 和 mysql 两种类型，后续会提供更加丰富的配置。创建数据库后会返回数据库的连接信息，用户可以自行修改配置。&lt;/p&gt;

&lt;p&gt;KubeService 负责核心服务和 kubernetes 集群的调用。DeploymentService、AppService、DbService 都需要通过调用 KubeService 来获取容器相关的信息，KubeService 是相对较独立的部分。&lt;/p&gt;

&lt;h2 id=&quot;kubernetes-资源&quot;&gt;kubernetes 资源&lt;/h2&gt;

&lt;p&gt;我们选择采用 RESTful API 的方式与 kubernetes 集群通信，这样会有更强的扩展性。&lt;/p&gt;

&lt;p&gt;在核心服务生成完应用镜像之后，KubeService 会调用接口生成 Deployment、Ingress、Service、Pod 四种资源。生成资源的参数来自于应用的配置，这些配置会以规范的形式制定出来，防止出现意料之外的情况。&lt;/p&gt;

&lt;p&gt;在 Node Labs 平台的开发中，以上的四种资源已经可以满足 Node.js 应用部署的基本需求。当然，基于 kubernetes api 提供的强大功能，我们通过简单的接口调用就可以扩展 Node Labs 平台的核心功能。&lt;/p&gt;

&lt;h2 id=&quot;消息服务&quot;&gt;消息服务&lt;/h2&gt;

&lt;p&gt;主要负责核心服务和前台实时的消息推送，比如部署进行的状态、滚动日志等。消息队列基于 kafka 集群，Node Labs 核心服务会是主要的内容产生者，但是也可以基于此架构提供一些全双工的通信功能。&lt;/p&gt;

&lt;h2 id=&quot;其他&quot;&gt;其他&lt;/h2&gt;

&lt;p&gt;除了部署、应用状态的查看，平台还会涉及监控、日志分析、动态扩容等功能。这些周边还在规划之中，是整个平台不可缺少的部分。&lt;/p&gt;

&lt;p&gt;每个模块具体的实现接下来的博客会进行介绍，下一篇会详细讲解一个应用部署的整个流程。&lt;/p&gt;
</description>
        <pubDate>Wed, 21 Mar 2018 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2018/03/21/%E5%9F%BA%E4%BA%8E%E5%AE%B9%E5%99%A8%E5%8C%96%E7%9A%84%E6%96%B9%E6%A1%88%E6%90%AD%E5%BB%BA-Node.js-%E5%BA%94%E7%94%A8%E9%83%A8%E7%BD%B2%E5%B9%B3%E5%8F%B0-%E4%B8%80-%E7%BB%BC%E8%BF%B0/</link>
        <guid isPermaLink="true">http://localhost:4000/2018/03/21/%E5%9F%BA%E4%BA%8E%E5%AE%B9%E5%99%A8%E5%8C%96%E7%9A%84%E6%96%B9%E6%A1%88%E6%90%AD%E5%BB%BA-Node.js-%E5%BA%94%E7%94%A8%E9%83%A8%E7%BD%B2%E5%B9%B3%E5%8F%B0-%E4%B8%80-%E7%BB%BC%E8%BF%B0/</guid>
        
        
      </item>
    
      <item>
        <title>关于node一gyp 编译 C++ Addons 踩坑经历</title>
        <description>&lt;p&gt;今天在打包一个Node.js应用镜像的时候，报了一个这样的错：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt; sleep@5.1.1 install /usr/src/app/node_modules/sleep
&amp;gt; node-gyp rebuild

gyp ERR! configure error
gyp ERR! stack Error: Can't find Python executable &quot;python&quot;, you can set the PYTHON env variable.
gyp ERR! stack     at PythonFinder.failNoPython (/usr/lib/node_modules/npm/node_modules/node-gyp/lib/configure.js:483:19)
gyp ERR! stack     at PythonFinder.&amp;lt;anonymous&amp;gt; (/usr/lib/node_modules/npm/node_modules/node-gyp/lib/configure.js:397:16)
gyp ERR! stack     at F (/usr/lib/node_modules/npm/node_modules/which/which.js:68:16)
gyp ERR! stack     at E (/usr/lib/node_modules/npm/node_modules/which/which.js:80:29)
gyp ERR! stack     at /usr/lib/node_modules/npm/node_modules/which/which.js:89:16
gyp ERR! stack     at /usr/lib/node_modules/npm/node_modules/which/node_modules/isexe/index.js:42:5
gyp ERR! stack     at /usr/lib/node_modules/npm/node_modules/which/node_modules/isexe/mode.js:8:5
gyp ERR! stack     at FSReqWrap.oncomplete (fs.js:152:21)
gyp ERR! System Linux 4.9.49-moby
gyp ERR! command &quot;/usr/bin/node&quot; &quot;/usr/lib/node_modules/npm/node_modules/node-gyp/bin/node-gyp.js&quot; &quot;rebuild&quot;
gyp ERR! cwd /usr/src/app/node_modules/sleep
gyp ERR! node -v v8.9.1
gyp ERR! node-gyp -v v3.6.2
gyp ERR! not ok

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;原来是项目引用了一个第三方的sleep模块，查看文档后发现这个模块是C++编写的，所以需要编译成.node文件。编译的工具是node-gyp，看起来这个工具好像依赖python，但是我的基础镜像只有node的环境。&lt;/p&gt;

&lt;p&gt;看来我需要构建一个包含node和python的基础镜像，于是我编写了下面的Dockerfile&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;FROM mhart/alpine-node:8

## 设置 node-sass 源 和 安装python

RUN npm config set sass_binary_site https://npm.taobao.org/mirrors/node-sass &amp;amp;&amp;amp; \
  apk add --update \
      python \
      python-dev \
      py-pip \
  &amp;amp;&amp;amp; rm -rf /var/cache/apk/*

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;看起来这样就可以构建出想要的基于node和python的镜像。先运行&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker build -t node-python .
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;不出意外的话应该可以成功构建我所需要的基础镜像。但是却卡在了这里&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Step 3/3 : RUN npm config set registry http://npm-registry.qunhequnhe.com/ &amp;amp;&amp;amp;     npm config set sass_binary_site https://npm.taobao.org/mirrors/node-sass &amp;amp;&amp;amp;   apk add --update       python       python-dev       py-pip       build-base   &amp;amp;&amp;amp; rm -rf /var/cache/apk/*
 ---&amp;gt; Running in f630a6320c4b
fetch http://dl-cdn.alpinelinux.org/alpine/v3.6/main/x86_64/APKINDEX.tar.gz
fetch http://dl-cdn.alpinelinux.org/alpine/v3.6/community/x86_64/APKINDEX.tar.gz

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;估计是http://dl-cdn.alpinelinux.org这个源访问不到的问题，那就用阿里的源来替代：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;FROM mhart/alpine-node:8

# 使用阿里云的源
ENV ALPINE_MIRROR &quot;http://mirrors.aliyun.com/alpine&quot;

RUN echo &quot;${ALPINE_MIRROR}/v3.7/main&quot; &amp;gt; /etc/apk/repositories;
RUN echo &quot;${ALPINE_MIRROR}/v3.7/community&quot; &amp;gt;&amp;gt; /etc/apk/repositories;

## 设置 node-sass 源 和 安装python

RUN npm config set sass_binary_site https://npm.taobao.org/mirrors/node-sass &amp;amp;&amp;amp; \
  apk add --update \
      python \
      python-dev \
      py-pip \
  &amp;amp;&amp;amp; rm -rf /var/cache/apk/*

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;这次终于成功地构建了node-python镜像。&lt;/p&gt;

&lt;p&gt;然后编写新的项目Dockerfile如下：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;FROM node-python

# Create app directory
WORKDIR /usr/src/app

# Install app dependencies
# A wildcard is used to ensure both package.json AND package-lock.json are copied
# where available (npm@5+)
COPY package*.json ./


RUN npm install
# If you are building your code for production
# RUN npm install --only=production

# Bundle app source
COPY . .

EXPOSE 7001

CMD [ &quot;npm&quot;, &quot;build&quot; ]
CMD [ &quot;npm&quot;, &quot;start&quot; ]

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;再次build项目镜像，没想到还是报错了：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt; sleep@5.1.1 install /usr/src/app/node_modules/sleep
&amp;gt; node-gyp rebuild

gyp ERR! build error
gyp ERR! stack Error: not found: make
gyp ERR! stack     at getNotFoundError (/usr/lib/node_modules/npm/node_modules/which/which.js:13:12)
gyp ERR! stack     at F (/usr/lib/node_modules/npm/node_modules/which/which.js:68:19)
gyp ERR! stack     at E (/usr/lib/node_modules/npm/node_modules/which/which.js:80:29)
gyp ERR! stack     at /usr/lib/node_modules/npm/node_modules/which/which.js:89:16
gyp ERR! stack     at /usr/lib/node_modules/npm/node_modules/which/node_modules/isexe/index.js:42:5
gyp ERR! stack     at /usr/lib/node_modules/npm/node_modules/which/node_modules/isexe/mode.js:8:5
gyp ERR! stack     at FSReqWrap.oncomplete (fs.js:152:21)
gyp ERR! System Linux 4.9.49-moby
gyp ERR! command &quot;/usr/bin/node&quot; &quot;/usr/lib/node_modules/npm/node_modules/node-gyp/bin/node-gyp.js&quot; &quot;rebuild&quot;
gyp ERR! cwd /usr/src/app/node_modules/sleep
gyp ERR! node -v v8.10.0
gyp ERR! node-gyp -v v3.6.2
gyp ERR! not ok

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;看来镜像中还缺少C++编译的环境，可以选择安装build-base这个package：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;FROM mhart/alpine-node:8

## 设置 node-sass 源 和 安装python以及编译工具

RUN npm config set sass_binary_site https://npm.taobao.org/mirrors/node-sass &amp;amp;&amp;amp; \
  apk add --update \
      python \
      python-dev \
      py-pip \
      build-base \
  &amp;amp;&amp;amp; rm -rf /var/cache/apk/*

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;重新生成node-python镜像。&lt;/p&gt;

&lt;p&gt;再次构建项目镜像，OK，完成！&lt;/p&gt;
</description>
        <pubDate>Wed, 21 Mar 2018 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2018/03/21/%E5%85%B3%E4%BA%8Enode%E4%B8%80gyp-%E7%BC%96%E8%AF%91-C++-Addons-%E8%B8%A9%E5%9D%91%E7%BB%8F%E5%8E%86/</link>
        <guid isPermaLink="true">http://localhost:4000/2018/03/21/%E5%85%B3%E4%BA%8Enode%E4%B8%80gyp-%E7%BC%96%E8%AF%91-C++-Addons-%E8%B8%A9%E5%9D%91%E7%BB%8F%E5%8E%86/</guid>
        
        
      </item>
    
  </channel>
</rss>
